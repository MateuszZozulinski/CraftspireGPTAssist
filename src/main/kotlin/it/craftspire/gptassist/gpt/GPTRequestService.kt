package it.craftspire.gptassist.gpt

import com.knuddels.jtokkit.Encodings
import com.knuddels.jtokkit.api.Encoding
import com.knuddels.jtokkit.api.EncodingRegistry
import com.knuddels.jtokkit.api.EncodingType
import com.theokanning.openai.completion.chat.ChatCompletionRequest
import com.theokanning.openai.completion.chat.ChatMessage
import com.theokanning.openai.service.OpenAiService
import it.craftspire.gptassist.state.StoredStateComponent
import retrofit2.HttpException
import java.time.Duration


class GPTRequestService {
    private val configState
        get() = StoredStateComponent.instance.state

    companion object {
        private const val CODE_REVIEW_CONSTRUCT = "You are an expert software developer focusing on the quality of code. " +
                "You will receive code snippets and tell the user what could be improved. Always respond with string in HTML format."
        private const val CODE_EXPLAIN_CONSTRUCT = "You are an AI designed to help programmers understand complex code written in %language%. You MUST FOLLOW THESE THREE RULES:" +
                "1. ALWAYS respond in the following pattern:" +
                "<div><h3>purpose of code<h3>\n" +
                "<ol>\n<li>description of algorithmic step</li> ... (this description can repeat N times)\n</ol>\n" +
                "<p>Noteworthy informations</p>\n" +
                "</div>" +
                "2. NEVER make up an answer - if you cannot describe the code respond with: <div>Sorry I don't know</div>" +
                "3. Focus on providing clear and concise answer" +
                "Reminder follow ALWAYS respond in required pattern." +
                "EXAMPLE:\n" +
                "User Query: fun solution(set: MutableList<Int>): MutableList<MutableList<Int>> {\n" +
                "        val result = mutableListOf<MutableList<Int>>()\n" +
                "        for (i in 0 until set.size) {\n" +
                "            for (j in i until set.size) {\n" +
                "                result.add(set.subList(i, j+1))\n" +
                "            }\n" +
                "        }\n" +
                "        return result\n" +
                "    }" +
                "Assistant Response: <div><h3>This function generates all possible contiguous sublists of a given list of integers</h3>\n" +
                "<ol>\n" +
                "<li>It takes a MutableList of integers as input</li>\n" +
                "<li>It initializes an empty MutableList called \"result\" to store all the possible sublists.</li>\n" +
                "<li>It uses two nested loops to generate all possible sublists. The outer loop iterates through each index of the input list, while the inner loop iterates through each index from the current outer loop index to the end of the input list</li>\n" +
                "<li>For each pair of indices (i, j) generated by the loops, it adds the sublist from index i to index j (inclusive) to the \"result\" MutableList using the \"subList\" method.</li>\n" +
                "<li>Finally, it returns the \"result\" MutableList containing all possible sublists of the input list.</li>\n" +
                "</ol>\n" +
                "<p>Finally, it returns the \"result\" MutableList containing all possible sublists of the input list.</p>\n" +
                "</div>"
        private const val MAX_LENGTH_EXCEEDED = "Sorry, your query exceeds maximum allowed length. Please select shorter text"
        private const val LANGUAGE_PATTERN = "%language%"
        private const val SYSTEM_USER = "system"
        private const val USER = "user"

        val instance: GPTRequestService
            get() = GPTRequestService()
    }

    fun reviewSelectedCode(lang: String, reviewedPatch: String, handleResponse: (String) -> Unit) {
        askGPT(CODE_REVIEW_CONSTRUCT.replace(LANGUAGE_PATTERN, lang), reviewedPatch, handleResponse)
    }

    fun describeSelectedCode(lang: String, reviewedPatch: String, handleResponse: (String) -> Unit) {
        askGPT(CODE_EXPLAIN_CONSTRUCT.replace(LANGUAGE_PATTERN, lang), reviewedPatch, handleResponse)
    }

    private fun askGPT(systemQueryConstruct: String, userQuery: String, handleResponse: (String) -> Unit) {
        if (!isValidQueryLength(userQuery)) {
            handleResponse(MAX_LENGTH_EXCEEDED)
        }
        val service = initiateOpenAIService()
        val completionRequest = buildCompletionRequest(systemQueryConstruct, userQuery)

        try {
            getGPTChatResponse(service, completionRequest, handleResponse)
        } catch (ex: HttpException) {
            "OpenAI exception occured: " + ex.message()
        }
    }

    private fun isValidQueryLength(userQuery: String): Boolean {
        val registry: EncodingRegistry = Encodings.newDefaultEncodingRegistry()
        val enc: Encoding = registry.getEncoding(EncodingType.CL100K_BASE)
        return enc.countTokens(userQuery) <= 3000
    }

    private fun getGPTChatResponse(service: OpenAiService, completionRequest: ChatCompletionRequest?,
                                   handleResponse: (String) -> Unit) {
        val responseBuilder = StringBuilder("")
        if (configState.newLayout) {
            service.streamChatCompletion(completionRequest).blockingForEach {
                val response = it.choices[0].message.content
                if (response != null) handleResponse(response)
            }
        } else {
            service.createChatCompletion(completionRequest).choices.forEach {
                responseBuilder.appendLine(it.message.content)
            }
            handleResponse(responseBuilder.toString())
        }
    }

    private fun buildCompletionRequest(systemQueryConstruct: String, userQuery: String): ChatCompletionRequest? =
            ChatCompletionRequest.builder()
                    .temperature(configState.temperature)
                    .maxTokens(1024)
                    .messages(listOf(ChatMessage(
                            SYSTEM_USER, systemQueryConstruct),
                            ChatMessage(USER, userQuery)))
                    .model(configState.gptModel)
                    .stream(configState.newLayout)
                    .build()

    private fun initiateOpenAIService() = OpenAiService(configState.getAPIKey(), Duration.ofSeconds(60))
}